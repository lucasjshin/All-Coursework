a.costs <- c()
for(threshold in possible.threshold){
X <- threshold
stroke.data.new <- test.data %>%
mutate(preds = case_when(predictions$posterior[,2] >= X ~ "Yes",
TRUE ~ "No"))
# Confusion Matrix
confusionMatrix <- table(stroke.data.new$stroke, stroke.data.new$preds)
# calculate cost
a.costs <- c(a.costs, confusionMatrix[2]*3 + confusionMatrix[3])
print(threshold)
print(confusionMatrix[2]*3 + confusionMatrix[3])
}
#print(a.costs)
print(paste0("Minimum Cost: ", min(a.costs)))
#min.a.cost.index <- which(a.costs)
#print(paste0("Corresponding Threshold: ", possible.threshold[min.FOR.index]))
#print("Costs:")
#print(min(a.costs))
#a.index <- which
#min.for.index <- which.min(FORs)
a.costs <- c()
for(threshold in possible.threshold){
X <- threshold
stroke.data.new <- test.data %>%
mutate(preds = case_when(predictions$posterior[,2] >= X ~ "Yes",
TRUE ~ "No"))
# Confusion Matrix
confusionMatrix <- table(stroke.data.new$stroke, stroke.data.new$preds)
# calculate cost
a.costs <- c(a.costs, confusionMatrix[2]*3 + confusionMatrix[3])
#print(threshold)
#print(confusionMatrix[2]*3 + confusionMatrix[3])
}
#print(a.costs)
print(paste0("Minimum Cost: ", min(a.costs)))
#min.a.cost.index <- which(a.costs)
#print(paste0("Corresponding Threshold: ", possible.threshold[min.FOR.index]))
#print("Costs:")
#print(min(a.costs))
#a.index <- which
#min.for.index <- which.min(FORs)
a.costs <- c()
for(threshold in possible.threshold){
X <- threshold
stroke.data.new <- test.data %>%
mutate(preds = case_when(predictions$posterior[,2] >= X ~ "Yes",
TRUE ~ "No"))
# Confusion Matrix
confusionMatrix <- table(stroke.data.new$stroke, stroke.data.new$preds)
# calculate cost
a.costs <- c(a.costs, confusionMatrix[2]*3 + confusionMatrix[3])
#print(threshold)
#print(confusionMatrix[2]*3 + confusionMatrix[3])
}
#print(a.costs)
print(paste0("Minimum Cost: ", min(a.costs)))
min.a.cost.index <- which.min(a.costs)
print(paste0("Corresponding Threshold: ", possible.threshold[min.a.cost.index]))
#print(paste0("Corresponding Threshold: ", possible.threshold[min.FOR.index]))
#print("Costs:")
#print(min(a.costs))
#a.index <- which
#min.for.index <- which.min(FORs)
b.costs <- c()
for(threshold in possible.threshold){
X <- threshold
stroke.data.new <- test.data %>%
mutate(preds = case_when(predictions$posterior[,2] >= X ~ "Yes",
TRUE ~ "No"))
# Confusion Matrix
confusionMatrix <- table(stroke.data.new$stroke, stroke.data.new$preds)
# calculate cost
b.costs <- c(b.costs, confusionMatrix[2]*100000 + confusionMatrix[3]*100)
}
print(paste0("Minimum Cost: ", min(b.costs)))
min.b.cost.index <- which.min(b.costs)
print(paste0("Corresponding Threshold: ", possible.threshold[min.b.cost.index]))
# find best sensitivities and false omission rates
sensitivities <- c()
FORs <- c()
# set boundaries of .88 and .99 because other values from 0 to 1 produce NAs
possible.threshold <- seq(from = .88,
to = .99,
by = 0.01)
for(threshold in possible.threshold){
X <- threshold
stroke.data.new <- test.data %>%
mutate(preds = case_when(predictions$posterior[,2] >= X ~ "Yes",
TRUE ~ "No"))
#Confusion Matrix
confusionMatrix <- table(stroke.data.new$stroke, stroke.data.new$preds)
print(threshold)
print(confusionMatrix)
sensitivities <- c(sensitivities, confusionMatrix[4]/(confusionMatrix[4]+confusionMatrix[2]))
FORs <- c(FORs, confusionMatrix[2]/(confusionMatrix[2]+confusionMatrix[1]))
}
print(paste0("Max Sensitivity: ", max(sensitivities)))
max.sensitivity.index <- which.max(sensitivities)
print(paste0("Corresponding Threshold: ", possible.threshold[max.sensitivity.index]))
print(paste0("Min FOR: ", min(FORs)))
min.FOR.index <- which.min(FORs)
print(paste0("Corresponding Threshold: ", possible.threshold[min.FOR.index]))
new.stroke.data <- normalized.stroke.data %>%
subset(select = -c(hypertension, heart_disease, residence, ever.married))
set.seed(1)
# create testing and training sets for the LDA model. Use 70% of dataset as training set and
# remaining 30% as testing set (method of creating training and test taken from:
# https://www.statology.org/linear-discriminant-analysis-in-r/)
sample <- sample(c(TRUE, FALSE), nrow(new.stroke.data), replace=TRUE, prob=c(0.7,0.3))
train.data <- new.stroke.data[sample, ]
test.data <- new.stroke.data[!sample, ]
lda.stroke <- lda(stroke ~ avg_glucose_level + bmi, data = train.data, prior = c(0.04257486, 0.9574251))
predictions <- predict(lda.stroke, test.data)
# find best sensitivities and false omission rates
sensitivities <- c()
FORs <- c()
# set boundaries of .88 and .99 because other values from 0 to 1 produce NAs
possible.threshold <- seq(from = .88,
to = .99,
by = 0.01)
for(threshold in possible.threshold){
X <- threshold
stroke.data.new <- test.data %>%
mutate(preds = case_when(predictions$posterior[,2] >= X ~ "Yes",
TRUE ~ "No"))
#Confusion Matrix
confusionMatrix <- table(stroke.data.new$stroke, stroke.data.new$preds)
print(threshold)
print(confusionMatrix)
sensitivities <- c(sensitivities, confusionMatrix[4]/(confusionMatrix[4]+confusionMatrix[2]))
FORs <- c(FORs, confusionMatrix[2]/(confusionMatrix[2]+confusionMatrix[1]))
}
print(paste0("Max Sensitivity: ", max(sensitivities)))
max.sensitivity.index <- which.max(sensitivities)
print(paste0("Corresponding Threshold: ", possible.threshold[max.sensitivity.index]))
print(paste0("Min FOR: ", min(FORs)))
min.FOR.index <- which.min(FORs)
print(paste0("Corresponding Threshold: ", possible.threshold[min.FOR.index]))
a.costs <- c()
for(threshold in possible.threshold){
X <- threshold
stroke.data.new <- test.data %>%
mutate(preds = case_when(predictions$posterior[,2] >= X ~ "Yes",
TRUE ~ "No"))
# Confusion Matrix
confusionMatrix <- table(stroke.data.new$stroke, stroke.data.new$preds)
# calculate cost
a.costs <- c(a.costs, confusionMatrix[2]*3 + confusionMatrix[3])
}
print(paste0("Minimum Cost: ", min(a.costs)))
min.a.cost.index <- which.min(a.costs)
print(paste0("Corresponding Threshold: ", possible.threshold[min.a.cost.index]))
b.costs <- c()
for(threshold in possible.threshold){
X <- threshold
stroke.data.new <- test.data %>%
mutate(preds = case_when(predictions$posterior[,2] >= X ~ "Yes",
TRUE ~ "No"))
# Confusion Matrix
confusionMatrix <- table(stroke.data.new$stroke, stroke.data.new$preds)
# calculate cost
b.costs <- c(b.costs, confusionMatrix[2]*100000 + confusionMatrix[3]*100)
}
print(paste0("Minimum Cost: ", min(b.costs)))
min.b.cost.index <- which.min(b.costs)
print(paste0("Corresponding Threshold: ", possible.threshold[min.b.cost.index]))
all.data <- data.frame("Sensitivity" = sensitivities, "FOR" = FORs, "Threshold" = possible.threshold)
all.data %>%
ggplot() +
geom_point(aes(x = Threshold, y = Sensitivity, color = "Sensitivity")) +
geom_point(aes(x = Threshold, y = FOR, color = "FOR")) +
labs(x = "Threshold", y = "Metric", title="Metric Values at Several Thresholds")
knitr::opts_chunk$set(echo = TRUE, message = FALSE)
library(FNN)
library(MASS)
library(ISLR)
library(readxl)
library(tidyverse)
library(dplyr)
library(ggforce)
library(rpart)
library(rattle)
library(FNN)
library(MASS)
library(ISLR)
library(readxl)
library(tidyverse)
library(dplyr)
library(ggforce)
library(rpart)
library(rattle)
mean(diamonds$price)
diamonds %>%
sample_n(nrow(diamonds), replace = TRUE) %>%
summarize(mean = mean(price))
diamonds %>%
sample_n(nrow(diamonds), replace = TRUE) %>%
summarize(mean = mean(price))
diamonds %>%
sample_n(nrow(diamonds), replace = TRUE) %>%
summarize(mean = mean(price))
diamonds %>%
sample_n(nrow(diamonds), replace = TRUE) %>%
summarize(mean = mean(price))
diamonds %>%
sample_n(nrow(diamonds), replace = TRUE) %>%
summarize(mean = mean(price))
# bagging with regression
# build a linear model to predict diamond price from everything
model1 <- lm(price ~., data = diamonds)
summary(model1)
bag1 <- lm(price ~., data = diamonds %>%  sample_n(nrow(diamonds), replace = TRUE))
summary(bag1)
tree1 <- rpart(price ~., data = diamonds %>%  sample_n(nrow(diamonds), replace = TRUE))
fancyRpartPlot(tree1)
library(FNN)
library(MASS)
library(ISLR)
library(readxl)
library(tidyverse)
library(dplyr)
library(ggforce)
library(rpart)
library(rattle)
q <- cumprod( (365:1)/365 )
q
sum(q)
q[365]
nreps <- 100000
sim <- replicate(nreps, {
rolls <- sample(1:366, 23, replace=TRUE)
})
sim
rolls
sim
View(sim)
nreps <- 10000
sim <- replicate(nreps, {
rolls <- sample(1:366, 23, replace=TRUE)
})
View(sim)
?duplicated
for (r in 1:nrows(sim)) {
duplicated(sim[r,])
}
for (r in 1:nrow(sim)) {
duplicated(sim[r,])
}
duplicates <- c()
for (r in 1:nrow(sim)) {
duplicates <- c(duplicates,duplicated(sim[r,]))
}
nreps <- 10000
sim <- replicate(nreps, {
rolls <- sample(1:366, 23, replace=TRUE)
})
duplicates <- c()
for (r in 1:nrow(sim)) {
print(duplicated(sim[r,]))
}
?duplicated
for (r in 1:nrow(sim)) {
duplicates <- (duplicated(sim[r,]))
}
nreps <- 10000
sim <- replicate(nreps, {
rolls <- sample(1:366, 23, replace=TRUE)
})
duplicates <- c()
for (r in 1:nrow(sim)) {
duplicates <- sum((duplicated(sim[r,])))
}
duplicates
duplicates/nreps
sim <- replicate(nreps, {
rolls <- sample(1:366, 22, replace=TRUE)
})
duplicates <- c()
for (r in 1:nrow(sim)) {
duplicates <- sum((duplicated(sim[r,])))
}
duplicates/nreps
nreps <- 10000
sim <- replicate(nreps, {
rolls <- sample(1:366, 15, replace=TRUE)
})
duplicates <- c()
for (r in 1:nrow(sim)) {
duplicates <- sum((duplicated(sim[r,])))
}
duplicates/nreps
duplicates
nreps <- 10000
sim <- replicate(nreps, {
rolls <- sample(1:366, 15, replace=TRUE)
})
duplicates <- c()
for (r in 1:nrow(sim)) {
duplicates <- sum(sim[r,])
}
duplicates/nreps
duplicates
sim[1,]
sim <- replicate(nreps, {
rolls <- sample(1:366, 23, replace=TRUE)
})
for (r in 1:nrow(sim)) {
duplicates <- duplicated(sim[r,])
}
duplicates
sim <- replicate(nreps, {
rolls <- sample(1:366, 23, replace=TRUE)
})
duplicates <- c()
for (r in 1:ncol(sim)) {
duplicates <- duplicated(sim[,r])
}
duplicates
nreps <- 10000
nreps <- 10000
sim <- replicate(nreps, {
birthdays <- sample(1:366, 23, replace=TRUE)
})
duplicates <- c()
for (r in 1:ncol(sim)) {
duplicates <- duplicated(sim[,r])
}
sum(duplicates)/nreps
nreps <- 10000
sim <- replicate(nreps, {
birthdays <- sample(1:365, 50, replace=TRUE)
})
nreps <- 10000
sim <- replicate(nreps, {
birthdays <- sample(1:365, 50, replace=TRUE)
})
duplicates <- c()
birthdays <- sample(1:365, 50, replace=TRUE)
which(duplicates(birthdays))
which(duplicated(birthdays))
which(duplicated(birthdays))[0]
which(duplicated(birthdays))
duplicates <- which(duplicated(birthdays))
duplicates[1]
duplicates <- which(duplicated(birthdays))
nreps <- 10000
duplicates <- c()
sim <- replicate(nreps, {
birthdays <- sample(1:365, 50, replace=TRUE)
duplicates <- c(duplicates,which(duplicated(birthdays)))
})
sim
table(sim)
sim
View(sim)
nreps <- 10000
duplicates <- c()
sim <- replicate(nreps, {
birthdays <- sample(1:365, 50, replace=TRUE)
duplicates <- c(duplicates,which(duplicated(birthdays))[1])
})
sim
table(sim)
nreps <- 100000
duplicates <- c()
sim <- replicate(nreps, {
birthdays <- sample(1:365, 50, replace=TRUE)
duplicates <- c(duplicates,which(duplicated(birthdays))[1])
})
table(sim)
table(sim)/nreps
nreps <- 1000000
duplicates <- c()
sim <- replicate(nreps, {
birthdays <- sample(1:365, 50, replace=TRUE)
duplicates <- c(duplicates,which(duplicated(birthdays))[1])
})
table(sim)/nreps
nreps <- 1000000
duplicates <- c()
sim <- replicate(nreps, {
birthdays <- sample(1:365, 100, replace=TRUE)
duplicates <- c(duplicates,which(duplicated(birthdays))[1])
})
table(sim)
table(sim)/nreps
nreps <- 100000
duplicates <- c()
sim <- replicate(nreps, {
birthdays <- sample(1:365, 100, replace=TRUE)
duplicates <- c(duplicates,which(duplicated(birthdays))[1])
})
table(sim)
?any
table(sim)/nreps
nreps <- 100000
duplicates <- c()
sim <- replicate(nreps, {
birthdays <- sample(1:366, 100, replace=TRUE)
duplicates <- c(duplicates,which(duplicated(birthdays))[1])
})
table(sim)/nreps
birthdays <- sample(1:366, 100, replace=TRUE)
duplicates <- c(duplicates,which(duplicated(birthdays))[1])
duplicates
birthdays <- sample(1:366, 100, replace=TRUE)
duplicates <- c(duplicates,which(duplicated(birthdays))[1])
birthdays <- sample(1:366, 50, replace=TRUE)
duplicates <- c(duplicates,which(duplicated(birthdays))[1])
duplicates
?duplicates
?duplicated
birthdays
birthdays[43]
birthdays[24]
duplicated(birthdays)
birthdays[18]
which(birthdays, TRUE)
?which
?any
min(which(birthdays == TRUE))
?which
which(birthdays == TRUE)
birthdays
which(duplicated(birthdays) == TRUE)
min(which(duplicated(birthdays) == TRUE))
# birthdays <- sample(1:366, 50, replace=TRUE)
# duplicates <- c(duplicates,which(duplicated(birthdays)))
# min(which(duplicated(birthdays) == TRUE))
nreps <- 100000
duplicates <- c()
sim <- replicate(nreps, {
birthdays <- sample(1:366, 50, replace=TRUE)
duplicates <- c(duplicates,min(which(duplicated(birthdays) == TRUE)))
})
table(sim)/nreps
# birthdays <- sample(1:366, 50, replace=TRUE)
# duplicates <- c(duplicates,which(duplicated(birthdays)))
# min(which(duplicated(birthdays) == TRUE))
nreps <- 1000000
duplicates <- c()
sim <- replicate(nreps, {
birthdays <- sample(1:366, 50, replace=TRUE)
duplicates <- c(duplicates,min(which(duplicated(birthdays) == TRUE)))
})
table(sim)/nreps
# birthdays <- sample(1:366, 50, replace=TRUE)
# duplicates <- c(duplicates,which(duplicated(birthdays)))
# min(which(duplicated(birthdays) == TRUE))
nreps <- 1000000
duplicates <- c()
sim <- replicate(nreps, {
birthdays <- sample(1:366, 23, replace=TRUE)
duplicates <- c(duplicates,min(which(duplicated(birthdays) == TRUE)))
})
table(sim)/nreps
duplicates
sim
duplicates <- c()
sim <- replicate(nreps, {
birthdays <- sample(1:366, 23, replace=FALSE)
duplicates <- c(duplicates,min(which(duplicated(birthdays) == TRUE)))
})
table(sim)/nreps
# birthdays <- sample(1:366, 50, replace=TRUE)
# duplicates <- c(duplicates,which(duplicated(birthdays)))
# min(which(duplicated(birthdays) == TRUE))
nreps <- 100000
duplicates <- c()
sim <- replicate(nreps, {
birthdays <- sample(1:366, 23, replace=TRUE)
duplicates <- c(duplicates,min(which(duplicated(birthdays) == TRUE)))
})
table(sim)/nreps
table(sim)
table(sim)
?sum
count <- 0
for(i in length(sim)) {
if (i < 24) {
count <- count + 1
}
}
count/nreps
for(i in length(sim)) {
if (sim[i] < 24) {
count <- count + 1
}
}
count/nreps
sim[1]
sim[2]
sim[3]
sim[4]
sim[5]
sim
for(i in 1:length(sim)) {
if (sim[i] < 24) {
count <- count + 1
}
}
count/nreps
shiny::runApp('Desktop/Data Science/DS HW/hw4 (nba salaries vs stats)/NBA_SALARIES_VS_STATS_FINAL')
setwd("~/Desktop/Data Science/DS HW/hw4 (nba salaries vs stats)/NBA_SALARIES_VS_STATS_FINAL")
runApp()
setwd("~/Desktop/Data Science/DS HW/hw4 (nba salaries vs stats)")
runApp('NBA_SALARIES_VS_STATS_FINAL')
setwd("~/Desktop/Data Science/DS HW/hw4 (nba salaries vs stats)/NBA_SALARIES_VS_STATS_FINAL")
runApp()
setwd("~/Desktop/Data Science/DS HW/hw4 (nba salaries vs stats)")
runApp('NBA_SALARIES_VS_STATS_FINAL')
