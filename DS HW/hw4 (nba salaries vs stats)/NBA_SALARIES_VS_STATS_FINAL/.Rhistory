data = nba.data.before,
method = "rf",
tuneGrid = data.frame(mtry = c(1, 2, 3)))
# RandomForest
rf2 <- randomForest(rating~ .,
data = nba.data.before)
rf.caret.1
# create a normalization function
normalize <-function(x) {
(x-min(x))/(max(x)-min(x))
}
# Run normalization all columns so that 'age', 'avg_glucose_level', and 'bmi' are normalized
normalized.nba.data.before <- as.data.frame(lapply(nba.data.before[,c(1:19,21)], normalize))
# Make a vector to capture predictions for each k
pred.vector <- NULL
error.vector <- NULL
for(k in 1:50){
for(row in 1:nrow(normalized.nba.data.before)){
# Create test data
test.data <- normalized.nba.data.before[row, ] %>%
dplyr::select(-rating)
# Create training data
training.data <- normalized.nba.data.before[-row, ]
training.data.no.rating <- training.data %>%
dplyr::select(-rating)
# Regression
model1.reg <- knn.reg(train = training.data.no.rating,
test = test.data,
k = k,
y = training.data$rating)
pred.vector[row] <- model1.reg$pred - (normalized.nba.data.before[row, ] %>% pull(rating))
}
# Average error for a given value of k (across all data values), mean^2
error.vector[k] <- mean(pred.vector^2)
print(k)
}
View(normalized.nba.data.before)
# Make a vector to capture predictions for each k
pred.vector <- NULL
error.vector <- NULL
for(k in 1:50){
for(row in 1:nrow(normalized.nba.data.before)){
# Create test data
test.data <- normalized.nba.data.before[row, ] %>%
dplyr::select(-rating)
# Create training data
training.data <- normalized.nba.data.before[-row, ]
training.data.no.rating <- training.data %>%
dplyr::select(-rating)
# Regression
model1.reg <- knn.reg(train = training.data.no.rating,
test = test.data,
k = k,
y = training.data$rating)
pred.vector[row] <- model1.reg$pred - (normalized.nba.data.before[row, ] %>% pull(rating))
}
# Average error for a given value of k (across all data values), mean^2
error.vector[k] <- mean(pred.vector^2)
print(k)
}
# create a normalization function
normalize <-function(x) {
(x-min(x))/(max(x)-min(x))
}
# Run normalization all columns so that 'age', 'avg_glucose_level', and 'bmi' are normalized
normalized.nba.data.before <- as.data.frame(lapply(nba.data.before[,c(1:21)], normalize))
# Make a vector to capture predictions for each k
pred.vector <- NULL
error.vector <- NULL
for(k in 1:50){
for(row in 1:nrow(normalized.nba.data.before)){
# Create test data
test.data <- normalized.nba.data.before[row, ] %>%
dplyr::select(-rating)
# Create training data
training.data <- normalized.nba.data.before[-row, ]
training.data.no.rating <- training.data %>%
dplyr::select(-rating)
# Regression
model1.reg <- knn.reg(train = training.data.no.rating,
test = test.data,
k = k,
y = training.data$rating)
pred.vector[row] <- model1.reg$pred - (normalized.nba.data.before[row, ] %>% pull(rating))
}
# Average error for a given value of k (across all data values), mean^2
error.vector[k] <- mean(pred.vector^2)
print(k)
}
# Check the error at each k
pred.data <- data.frame(error.vector,
k = 1:50)
pred.data %>%
ggplot(aes(x = k,
y = error.vector)) +
geom_point()
# find the minimum error value from the error.vector previously calculated
min.error <- min(error.vector)
# find the optimal k that is associated with the min.error
optimal.k <- match(min.error, error.vector)
print(paste0("Minimum Error: ", min.error))
print(paste0("Optimal k Value: ", optimal.k))
ggplot(mapping = aes(x = PTS, y = Plus.Minus)) +
geom_point(size = .4, data = normalized.nba.data.before, aes(color = rating))
#Let's make a grid of all possible combinations of avg_glucose_level and bmi
grid <- expand.grid(PTS = seq(from = 0, to = 1, by = .01),
Plus.Minus = seq(from = 0, to = 1, by = .01))
grid <- grid %>%
group_by(PTS, Plus.Minus)
medians <- normalized.nba.data.before %>%
select(-rating, -PTS, -Plus.Minus) %>%
summarize_all(median)
prediction = knn.reg(train = normalized.nba.data.before %>% select(-rating),
test = grid %>% mutate(medians),
k = 11,
y = normalized.nba.data.before)
grid <- grid %>%
cbind(prediction$pred)
colnames(grid) <- c("PTS", "Plus.Minus", "prediction")
grid %>%
ggplot() +
geom_point(size = 5, mapping = aes(x = PTS, y = Plus.Minus, color = prediction)) +
theme_bw()
rf.caret.1
rf2
predictions <- predict(rf.caret.1, nba.data.before)
sensitivities <- c()
specificities <- c()
ourMetric <- c()
possible.threshold <- seq(from = 0.05,
to = 0.2,
by = 0.01)
for(threshold in possible.threshold){
X <- threshold
nba.data.before.new <- nba.data.before %>%
mutate(preds = case_when(predictions$predictions[,2] >= X ~ "Yes",
TRUE ~ "No"))
#Confusion Matrix
confusionMatrix <- table(nba.data.before.new$`rating`, nba.data.before.new$preds)
#
sensitivities <- c(sensitivities, confusionMatrix[4]/(confusionMatrix[4]+confusionMatrix[2]))
specificities <- c(specificities, confusionMatrix[1]/(confusionMatrix[1]+confusionMatrix[3]))
#ourMetric <- c(ourMetric, 2*(confusionMatrix[4]/(confusionMatrix[4]+confusionMatrix[2]))+confusionMatrix[1]/(confusionMatrix[1]+confusionMatrix[3]))
}
predictions <- predict(rf2, nba.data.before)
sensitivities <- c()
specificities <- c()
ourMetric <- c()
possible.threshold <- seq(from = 0.05,
to = 0.2,
by = 0.01)
for(threshold in possible.threshold){
X <- threshold
nba.data.before.new <- nba.data.before %>%
mutate(preds = case_when(predictions$predictions[,2] >= X ~ "Yes",
TRUE ~ "No"))
#Confusion Matrix
confusionMatrix <- table(nba.data.before.new$`rating`, nba.data.before.new$preds)
#
sensitivities <- c(sensitivities, confusionMatrix[4]/(confusionMatrix[4]+confusionMatrix[2]))
specificities <- c(specificities, confusionMatrix[1]/(confusionMatrix[1]+confusionMatrix[3]))
#ourMetric <- c(ourMetric, 2*(confusionMatrix[4]/(confusionMatrix[4]+confusionMatrix[2]))+confusionMatrix[1]/(confusionMatrix[1]+confusionMatrix[3]))
}
knitr::opts_chunk$set(echo = TRUE, message= FALSE, warning=FALSE)
#compare train and randomForest
oscar <- read_csv("Oscars-demographics-DFE.csv")
oscar <- oscar %>%
dplyr::select(`_golden`, race_ethnicity, religion, sexual_orientation)
#assigning Na for religion as unknown
oscar$religion <- str_replace(oscar$religion, "Na", "Unknown")
oscar$sexual_orientation <- str_replace(oscar$sexual_orientation, "Na", "Unknown")
set.seed(1)
# print this out and see that kappa is 0 - only predicting no oscar - same as random chance.
# we need to figure out how to make it start making positive predictions too
# maybe each individual tree cuts off too soon
# use ranger package instead randomForest. train calls other functions, adjust threshold for predicted probabilities
# train is from caret
rf.caret.1 <- train(factor(`_golden`) ~ .,
data = oscar,
method = "rf",
tuneGrid = data.frame(mtry = c(1, 2, 3)))
# ranger package
print("Ranger Function 1 (mtry = 3): ")
system.time({
rf3 <- ranger(factor(`_golden`) ~ .,
data = oscar,
probability = TRUE,
mtry = 3,
importance = "permutation") #,
#mtry = c(1, 2, 3))
})
predictions <- predict(rf.caret.1, nba.data.before)
predictions
library(ranger)
# ranger package
print("Ranger Function 1 (mtry = 3): ")
system.time({
rf3 <- ranger(factor(`_golden`) ~ .,
data = oscar,
probability = TRUE,
mtry = 3,
importance = "permutation") #,
#mtry = c(1, 2, 3))
})
library(Rccp)
install.packages("Rccp")
knitr::opts_chunk$set(echo = TRUE)
nba.data <- read_csv("nba_rankings_2014-2020.csv") %>%
select(-X1, -TEAM, -OREB, -DREB, -FP, -PF, -L, -DD2, -TD3) %>%
mutate(win.percentage = W/GP) %>%
select(-W)
library(FNN)
library(MASS)
library(ISLR)
library(readxl)
library(tidyverse)
library(dplyr)
library(ggforce)
library(rpart)
library(rattle)
library(randomForest)
library(ipred)
library(dendextend)
nba.data <- read_csv("nba_rankings_2014-2020.csv") %>%
select(-X1, -TEAM, -OREB, -DREB, -FP, -PF, -L, -DD2, -TD3) %>%
mutate(win.percentage = W/GP) %>%
select(-W)
colnames(nba.data)[22] <- "rating"
nba.data.before.with.names <- nba.data %>%
filter(SEASON == "2017-18") %>%
select(-SEASON)
nba.data.before <- nba.data %>%
filter(SEASON == "2017-18") %>%
select(-SEASON, -PLAYER)
nba.data.after <- nba.data %>%
filter(SEASON == "2019-20") %>%
select(-SEASON, -PLAYER)
# rename columns
colnames(nba.data.before)[7] <- 'FG.percent'
colnames(nba.data.before)[8] <- 'Threes.Made'
colnames(nba.data.before)[9] <- 'Threes.Attempted'
colnames(nba.data.before)[10] <- 'Threes.percent'
colnames(nba.data.before)[13] <- 'FT.percent'
colnames(nba.data.before)[19] <- 'Plus.Minus'
print(colMeans(nba.data.before))
nba.data.before %>%
ggplot(aes(x = win.percentage,
y = rating)) +
geom_point()
nba.data.before %>%
ggplot(aes(x = `Plus.Minus`,
y = rating)) +
geom_point()
nba.data.before %>%
ggplot(aes(x = PTS,
y = rating)) +
geom_point()
# create a normalization function
normalize <-function(x) {
(x-min(x))/(max(x)-min(x))
}
# Run normalization all columns so that 'age', 'avg_glucose_level', and 'bmi' are normalized
normalized.nba.data.before <- as.data.frame(lapply(nba.data.before[,c(1:21)], normalize))
# Make a vector to capture predictions for each k
pred.vector <- NULL
error.vector <- NULL
for(k in 1:50){
for(row in 1:nrow(normalized.nba.data.before)){
# Create test data
test.data <- normalized.nba.data.before[row, ] %>%
dplyr::select(-rating)
# Create training data
training.data <- normalized.nba.data.before[-row, ]
training.data.no.rating <- training.data %>%
dplyr::select(-rating)
# Regression
model1.reg <- knn.reg(train = training.data.no.rating,
test = test.data,
k = k,
y = training.data$rating)
pred.vector[row] <- model1.reg$pred - (normalized.nba.data.before[row, ] %>% pull(rating))
}
# Average error for a given value of k (across all data values), mean^2
error.vector[k] <- mean(pred.vector^2)
print(k)
}
# Check the error at each k
pred.data <- data.frame(error.vector,
k = 1:50)
pred.data %>%
ggplot(aes(x = k,
y = error.vector)) +
geom_point()
# find the minimum error value from the error.vector previously calculated
min.error <- min(error.vector)
# find the optimal k that is associated with the min.error
optimal.k <- match(min.error, error.vector)
print(paste0("Minimum Error: ", min.error))
print(paste0("Optimal k Value: ", optimal.k))
ggplot(mapping = aes(x = PTS, y = Plus.Minus)) +
geom_point(size = .4, data = normalized.nba.data.before, aes(color = rating))
#Let's make a grid of all possible combinations of avg_glucose_level and bmi
grid <- expand.grid(PTS = seq(from = 0, to = 1, by = .01),
Plus.Minus = seq(from = 0, to = 1, by = .01))
grid <- grid %>%
group_by(PTS, Plus.Minus)
medians <- normalized.nba.data.before %>%
select(-rating, -PTS, -Plus.Minus) %>%
summarize_all(median)
prediction = knn.reg(train = normalized.nba.data.before %>% select(-rating),
test = grid %>% mutate(medians),
k = 11,
y = normalized.nba.data.before)
grid <- grid %>%
cbind(prediction$pred)
colnames(grid) <- c("PTS", "Plus.Minus", "prediction")
grid %>%
ggplot() +
geom_point(size = 5, mapping = aes(x = PTS, y = Plus.Minus, color = prediction)) +
theme_bw()
library(caret)
library(rpart)
library(ipred)
library(randomForest)
#library(NLP)
#library(stringr)
#library(rattle)
#library(ranger)
set.seed(1)
# print this out and see that kappa is 0 - only predicting no oscar - same as random chance.
# we need to figure out how to make it start making positive predictions too
# maybe each individual tree cuts off too soon
# use ranger package instead randomForest. train calls other functions, adjust threshold for predicted probabilities
# train is from caret
rf.caret.1 <- train(rating~ .,
data = nba.data.before,
method = "rf",
tuneGrid = data.frame(mtry = c(1, 2, 3)))
# RandomForest
rf2 <- randomForest(rating~ .,
data = nba.data.before)
rf.caret.1
rf2
?knn.reg
library(mice)
install.packages("mice")
nbaData <- read_csv("nbaData@3.csv")
library(FNN)
library(MASS)
library(ISLR)
library(readxl)
library(tidyverse)
library(dplyr)
library(ggforce)
library(rpart)
library(rattle)
nbaData <- read_csv("nbaData@3.csv")
setwd("~/Desktop/stat learning")
nbaData <- read_csv("nbaData@3.csv")
View(nbaData)
# gun.data<- read_csv("gun-violence-data_01-2013_03-2018.csv")
#
# gun.data2 <- gun.data %>%
#   select(date, state, city_or_county, n_killed, n_injured) %>%
#   filter(city_or_county %in% c("Chicago", "Houston", "Los Angeles"))
#
# write.csv(gun.data2, "GunData.csv")
# disney <- read_csv("disney_movies.csv")
#
# disney <- disney %>%
#   mutate(year = substr(release_date, 1, 4)) %>%
#   mutate(decade = paste(substr(release_date, 1, 3), "0", sep=""))
# write.csv(disney, "DecadeDisney.csv")
nba <- read_csv("nba_team_stats_00_to_18.csv")
colnames(nba)[6] <- "WinPercentage"
colnames(nba)[11] <- "FGPercentage"
colnames(nba)[12] <- "ThreePM"
colnames(nba)[13] <- "ThreePA"
colnames(nba)[14] <- "ThreePointPercentage"
colnames(nba)[17] <- "FTPercentage"
colnames(nba)[28] <- "PlusMinus"
nba3 <- nba %>%
mutate(TEAM = str_replace(TEAM, "LA", "Los Angeles")) %>%
mutate(TEAM = str_replace(TEAM, "Seattle SuperSonics", "Washington Wizards")) %>%
mutate(TEAM = str_replace(TEAM, "Vancouver", "Memphis")) %>%
mutate(TEAM = str_replace(TEAM, "New Jersey", "Brooklyn"))
nba2 <- nba3 %>%
filter(TEAM %in% c("Atlanta Hawks", "Chicago Bulls", "Houston Rockets", "Los Angeles Clippers",
"Golden State Warriors", "Philadelphia 76ers", "Los Angeles Lakers", "Washington Wizards",
"New York Knicks", "Milwaukee Bucks"))
nba4 <- nba2 %>%
mutate(image = "hi")
nba4$image[nba4$TEAM == "Atlanta Hawks"] <- "http://assets.stickpng.com/thumbs/58419be4a6515b1e0ad75a58.png"
nba4$image[nba4$TEAM == "Chicago Bulls"] <- "http://assets.stickpng.com/thumbs/58419cf6a6515b1e0ad75a6b.png"
nba4$image[nba4$TEAM == "Los Angeles Clippers"] <- "http://assets.stickpng.com/thumbs/58419c59a6515b1e0ad75a60.png"
nba4$image[nba4$TEAM == "Golden State Warriors"] <- "http://assets.stickpng.com/thumbs/58419ce2a6515b1e0ad75a69.png"
nba4$image[nba4$TEAM == "Philadelphia 76ers"] <- "http://assets.stickpng.com/thumbs/58419ca3a6515b1e0ad75a64.png"
nba4$image[nba4$TEAM == "Los Angeles Lakers"] <- "http://assets.stickpng.com/thumbs/58419d0aa6515b1e0ad75a6c.png"
nba4$image[nba4$TEAM == "Washington Wizards"] <- "http://assets.stickpng.com/thumbs/58419c12a6515b1e0ad75a5b.png"
nba4$image[nba4$TEAM == "New York Knicks"] <- "http://assets.stickpng.com/thumbs/58419cc8a6515b1e0ad75a67.png"
nba4$image[nba4$TEAM == "Milwaukee Bucks"] <- "http://assets.stickpng.com/thumbs/58419ba7a6515b1e0ad75a54.png"
nba4$image[nba4$TEAM == "Houston Rockets"] <- "http://assets.stickpng.com/thumbs/58419ceda6515b1e0ad75a6a.png"
write.csv(nba4, "nbaData.csv")
nba <- read_csv("nba_team_stats_00_to_18.csv")
nba <- read_csv("nba_team_stats_00_to_18.csv")
colnames(nba)[6] <- "WinPercentage"
colnames(nba)[11] <- "FGPercentage"
colnames(nba)[12] <- "ThreePM"
colnames(nba)[13] <- "ThreePA"
colnames(nba)[14] <- "ThreePointPercentage"
colnames(nba)[17] <- "FTPercentage"
colnames(nba)[28] <- "PlusMinus"
nba3 <- nba %>%
mutate(TEAM = str_replace(TEAM, "LA", "Los Angeles")) %>%
mutate(TEAM = str_replace(TEAM, "Seattle SuperSonics", "Washington Wizards")) %>%
mutate(TEAM = str_replace(TEAM, "Vancouver", "Memphis")) %>%
mutate(TEAM = str_replace(TEAM, "New Jersey", "Brooklyn"))
nba2 <- nba3 %>%
filter(TEAM %in% c("Atlanta Hawks", "Chicago Bulls", "Houston Rockets", "Los Angeles Clippers",
"Golden State Warriors", "Philadelphia 76ers", "Los Angeles Lakers", "Washington Wizards",
"New York Knicks", "Milwaukee Bucks"))
nba4 <- nba2 %>%
mutate(image = "hi")
nba4$image[nba4$TEAM == "Atlanta Hawks"] <- "http://assets.stickpng.com/thumbs/58419be4a6515b1e0ad75a58.png"
nba4$image[nba4$TEAM == "Chicago Bulls"] <- "http://assets.stickpng.com/thumbs/58419cf6a6515b1e0ad75a6b.png"
nba4$image[nba4$TEAM == "Los Angeles Clippers"] <- "http://assets.stickpng.com/thumbs/58419c59a6515b1e0ad75a60.png"
nba4$image[nba4$TEAM == "Golden State Warriors"] <- "http://assets.stickpng.com/thumbs/58419ce2a6515b1e0ad75a69.png"
nba4$image[nba4$TEAM == "Philadelphia 76ers"] <- "http://assets.stickpng.com/thumbs/58419ca3a6515b1e0ad75a64.png"
nba4$image[nba4$TEAM == "Los Angeles Lakers"] <- "http://assets.stickpng.com/thumbs/58419d0aa6515b1e0ad75a6c.png"
nba4$image[nba4$TEAM == "Washington Wizards"] <- "http://assets.stickpng.com/thumbs/58419c12a6515b1e0ad75a5b.png"
nba4$image[nba4$TEAM == "New York Knicks"] <- "http://assets.stickpng.com/thumbs/58419cc8a6515b1e0ad75a67.png"
nba4$image[nba4$TEAM == "Milwaukee Bucks"] <- "http://assets.stickpng.com/thumbs/58419ba7a6515b1e0ad75a54.png"
nba4$image[nba4$TEAM == "Houston Rockets"] <- "http://assets.stickpng.com/thumbs/58419ceda6515b1e0ad75a6a.png"
write.csv(nba4, "nbaData.csv")
nba <- read_csv("nba_team_stats_00_to_18.csv")
colnames(nba)[6] <- "WinPercentage"
colnames(nba)[11] <- "FGPercentage"
colnames(nba)[12] <- "ThreePM"
colnames(nba)[13] <- "ThreePA"
colnames(nba)[14] <- "ThreePointPercentage"
colnames(nba)[17] <- "FTPercentage"
colnames(nba)[28] <- "PlusMinus"
nba3 <- nba %>%
mutate(TEAM = str_replace(TEAM, "LA", "Los Angeles")) %>%
mutate(TEAM = str_replace(TEAM, "Seattle SuperSonics", "Washington Wizards")) %>%
mutate(TEAM = str_replace(TEAM, "Vancouver", "Memphis")) %>%
mutate(TEAM = str_replace(TEAM, "New Jersey", "Brooklyn"))
nba2 <- nba3 %>%
filter(TEAM %in% c("Atlanta Hawks", "Chicago Bulls", "Houston Rockets", "Los Angeles Clippers",
"Golden State Warriors", "Philadelphia 76ers", "Los Angeles Lakers", "Washington Wizards",
"New York Knicks", "Milwaukee Bucks"))
nba4$image[nba4$TEAM == "Atlanta Hawks"] <- "http://assets.stickpng.com/thumbs/58419be4a6515b1e0ad75a58.png"
nba4$image[nba4$TEAM == "Chicago Bulls"] <- "http://assets.stickpng.com/thumbs/58419cf6a6515b1e0ad75a6b.png"
nba4$image[nba4$TEAM == "Los Angeles Clippers"] <- "http://assets.stickpng.com/thumbs/58419c59a6515b1e0ad75a60.png"
nba4$image[nba4$TEAM == "Golden State Warriors"] <- "http://assets.stickpng.com/thumbs/58419ce2a6515b1e0ad75a69.png"
nba4$image[nba4$TEAM == "Philadelphia 76ers"] <- "http://assets.stickpng.com/thumbs/58419ca3a6515b1e0ad75a64.png"
nba4$image[nba4$TEAM == "Los Angeles Lakers"] <- "http://assets.stickpng.com/thumbs/58419d0aa6515b1e0ad75a6c.png"
nba4$image[nba4$TEAM == "Washington Wizards"] <- "http://assets.stickpng.com/thumbs/58419c12a6515b1e0ad75a5b.png"
nba4$image[nba4$TEAM == "New York Knicks"] <- "http://assets.stickpng.com/thumbs/58419cc8a6515b1e0ad75a67.png"
nba4$image[nba4$TEAM == "Milwaukee Bucks"] <- "http://assets.stickpng.com/thumbs/58419ba7a6515b1e0ad75a54.png"
nba4$image[nba4$TEAM == "Houston Rockets"] <- "http://assets.stickpng.com/thumbs/58419ceda6515b1e0ad75a6a.png"
write.csv(nba4, "nbaData.csv")
nba <- read_csv("nba_team_stats_00_to_18.csv")
colnames(nba)[6] <- "WinPercentage"
colnames(nba)[11] <- "FGPercentage"
colnames(nba)[12] <- "ThreePM"
colnames(nba)[13] <- "ThreePA"
colnames(nba)[14] <- "ThreePointPercentage"
colnames(nba)[17] <- "FTPercentage"
colnames(nba)[28] <- "PlusMinus"
nba3 <- nba %>%
mutate(TEAM = str_replace(TEAM, "LA", "Los Angeles")) %>%
mutate(TEAM = str_replace(TEAM, "Seattle SuperSonics", "Washington Wizards")) %>%
mutate(TEAM = str_replace(TEAM, "Vancouver", "Memphis")) %>%
mutate(TEAM = str_replace(TEAM, "New Jersey", "Brooklyn"))
nba2 <- nba3 %>%
filter(TEAM %in% c("Atlanta Hawks", "Chicago Bulls", "Houston Rockets", "Los Angeles Clippers",
"Golden State Warriors", "Philadelphia 76ers", "Los Angeles Lakers", "Washington Wizards",
"New York Knicks", "Milwaukee Bucks"))
nba <- read_csv("nba_team_stats_00_to_18.csv")
setwd("~/Desktop/stat learning")
nba <- read_csv("nba_team_stats_00_to_18.csv")
nba <- read_csv("nba_team_stats_00_to_18.csv")
colnames(nba)[6] <- "WinPercentage"
colnames(nba)[11] <- "FGPercentage"
colnames(nba)[12] <- "ThreePM"
colnames(nba)[13] <- "ThreePA"
colnames(nba)[14] <- "ThreePointPercentage"
colnames(nba)[17] <- "FTPercentage"
colnames(nba)[28] <- "PlusMinus"
nba3 <- nba %>%
mutate(TEAM = str_replace(TEAM, "LA", "Los Angeles")) %>%
mutate(TEAM = str_replace(TEAM, "Seattle SuperSonics", "Washington Wizards")) %>%
mutate(TEAM = str_replace(TEAM, "Vancouver", "Memphis")) %>%
mutate(TEAM = str_replace(TEAM, "New Jersey", "Brooklyn"))
nba2 <- nba3 %>%
filter(TEAM %in% c("Atlanta Hawks", "Chicago Bulls", "Houston Rockets", "Los Angeles Clippers",
"Golden State Warriors", "Philadelphia 76ers", "Los Angeles Lakers", "Washington Wizards",
"New York Knicks", "Milwaukee Bucks"))
nba4 <- nba2 %>%
mutate(image = "hi")
nba4$image[nba4$TEAM == "Atlanta Hawks"] <- "http://assets.stickpng.com/thumbs/58419be4a6515b1e0ad75a58.png"
nba4$image[nba4$TEAM == "Chicago Bulls"] <- "http://assets.stickpng.com/thumbs/58419cf6a6515b1e0ad75a6b.png"
nba4$image[nba4$TEAM == "Los Angeles Clippers"] <- "http://assets.stickpng.com/thumbs/58419c59a6515b1e0ad75a60.png"
nba4$image[nba4$TEAM == "Golden State Warriors"] <- "http://assets.stickpng.com/thumbs/58419ce2a6515b1e0ad75a69.png"
nba4$image[nba4$TEAM == "Philadelphia 76ers"] <- "http://assets.stickpng.com/thumbs/58419ca3a6515b1e0ad75a64.png"
nba4$image[nba4$TEAM == "Los Angeles Lakers"] <- "http://assets.stickpng.com/thumbs/58419d0aa6515b1e0ad75a6c.png"
nba4$image[nba4$TEAM == "Washington Wizards"] <- "http://assets.stickpng.com/thumbs/58419c12a6515b1e0ad75a5b.png"
nba4$image[nba4$TEAM == "New York Knicks"] <- "http://assets.stickpng.com/thumbs/58419cc8a6515b1e0ad75a67.png"
nba4$image[nba4$TEAM == "Milwaukee Bucks"] <- "http://assets.stickpng.com/thumbs/58419ba7a6515b1e0ad75a54.png"
nba4$image[nba4$TEAM == "Houston Rockets"] <- "http://assets.stickpng.com/thumbs/58419ceda6515b1e0ad75a6a.png"
write.csv(nba4, "nbaData.csv")
