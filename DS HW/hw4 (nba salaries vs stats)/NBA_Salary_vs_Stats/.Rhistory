3+3
3+3
3+3
3+3
3+3
3+3
2*10
# here is how to comment
3+3
# here is how to comment
3+3
# here is how to comment
3+3
# here is how to comment
3+3
# here is how to comment
3+3
# here is how to comment
3+3
x+1
# here is how to comment
3+3
# here is how to comment
3+3
# let's store values in R
# here is how to comment
3+3
# here is how to comment
3+3
# here is how to comment
3+3
# here is how to comment
3+3
# here is how to comment
3+3
3+3
3+3
3+3
3+3
3+3
3+3
3+3
3+3
3+3
3+3
3+3
# let's store values in R
x = 5
# let's store values in R
x = 5
# let's store values in R
x <- 5
# let's store values in R
x <- 6
# let's store values in R
x <- 7
x+5
# functions
# "c" function, concatenate
c(1,2,3)
# functions
# "c" function, concatenate
vector1 <- c(1,2,3)
# take mean of vector
mean(vector1)
# help documentation, use ?
?mean()
# install 2 new packages
install.packages("ggplot2")
install.packages("dplyr")
# load packages into R
library(ggplot2)
library(dplyr)
# "diamonds" data set
?diamonds
View(diamonds)
diamonds
?filter()
filter(.data = diamonds)
filter(.data = diamonds,
price > 10000)
# find only the "best" diamonds
filter(.data = diamonds,
price > 10000,
carat > 2)
# find only the "best" diamonds
filter(.data = diamonds,
price > 10000,
carat > 3)
# find only the "best" diamonds
filter(.data = diamonds,
price > 10000,
carat > 4)
# find only the "best" diamonds
filter(.data = diamonds,
price > 10000,
carat > 2
)
# find only the "best" diamonds
filter(.data = diamonds,
price > 10000,
carat > 2
cut = ideal)
# find only the "best" diamonds
filter(.data = diamonds,
price > 10000,
carat > 2,
cut = ideal)
# find only the "best" diamonds
filter(.data = diamonds,
price > 10000,
carat > 2,
cut == ideal)
# find only the "best" diamonds
filter(.data = diamonds,
price > 10000,
carat > 2)
# find only the "best" diamonds
filter(.data = diamonds,
price > 10000,
carat > 2,
cut = "Ideal")
# find only the "best" diamonds
filter(.data = diamonds,
price > 10000,
carat > 2,
cut == "Ideal")
# find only the "best" diamonds
filter(.data = diamonds,
price > 10000,
carat > 2,
cut == Ideal)
# find only the "best" diamonds
filter(.data = diamonds,
price > 10000,
carat > 2,
cut == "Ideal")
# find only the "best" diamonds
filter(.data = diamonds,
price == 10181,
carat > 2,
cut == "Ideal")
# find only the "best" diamonds
filter(.data = diamonds,
price > 10000,
carat > 2,
cut == "Ideal")
# find diamonds between $9000 and $10,000
filter(.data = diamonds,
price < 10000,
price > 9000)
# find diamonds between $9000 and $10,000
filter(.data = diamonds,
price < 10000,
price > 9000)
filter(.data = diamonds,
between(price, 9000, 10000))
# install nycflights13 package, then look at the "flights" data set
install.packages("nycflights13")
library(nycflights13)
View(flights)
# find: avg departure delay of flights flying into Burlington Airport and Logan Airport
flights %>%
filter(dest %in% c("BTV", "BOS")) %>%
group_by(dest) %>%
summarize(mean.dep_delay = mean(dep_delay))
#### 9/14 Notes ####
library(dplyr)
library(magrittr)
library(ggplot2)
library(magrittr)
library(ggplot2)
#### 9/14 Notes ####
library(dplyr)
# find: avg departure delay of flights flying into Burlington Airport and Logan Airport
flights %>%
filter(dest %in% c("BTV", "BOS")) %>%
group_by(dest) %>%
summarize(mean.dep_delay = mean(dep_delay))
library(tidyverse)
library(ggplot2)
library("png")
imageList <- list.files("/Users/lucasshin/Desktop/Biometrics/Biometrics HW 3/testingfaces2/")
View(imageList)
faces <- matrix(nrow = 3600,
ncol = 0)
imageList <- list.files("/Users/lucasshin/Desktop/Biometrics/Biometrics HW 3/testingfaces2/")
for (i in length(imageList)) {
photo = imageList[i]
image = readPNG(paste("/Users/lucasshin/Desktop/Biometrics/Biometrics HW 3/testingfaces2/",
photo, sep = ""))
vecImage = as.vector(image)
faces <- cbind(faces, vecImage)
}
View(faces)
View(faces)
rowMeans <- rowMeans(faces)
print(typeof(imageList[0]))
typeof(imageList[0])
print(imageList[0][2])
?substring
ColMeans(rowMeans)
?colMeans
View(faces)
View(rowMeans)
library(tidyverse)
library(ggplot2)
install.packages("png")
library("png")
faces <- matrix(nrow = 3600,
ncol = 0)
for (i in 1:180) {
photo = paste(toString(i),
"_0.png",
sep = "")
image = readPNG(paste("/Users/lucasshin/Desktop/Biometrics/Biometrics HW 2/trainingfaces2/",
photo, sep = ""))
vecImage = as.vector(image)
faces <- cbind(faces, vecImage)
}
rowMeans <- rowMeans(faces)
View(rowMeans)
View(faces)
01 = 0
01 == 0
01 == 1
iter = 0
subMeans = c()
for (j in 1:26) {
meanPerSubject = c()
for (k in 1:length(imageList)) {
if (substr(c(imageList[k], start = 2, stop = 3)) == j) {
#meanPerSubject = c(meanPerSubject, )
print(faces[j, k])
}
}
}
iter = 0
subMeans = c()
for (j in 1:26) {
meanPerSubject = c()
for (k in 1:length(imageList)) {
if (substr(c(imageList[k]), start = 2, stop = 3) == j) {
#meanPerSubject = c(meanPerSubject, )
print(faces[j, k])
}
}
}
?colMeans
colMeans <- colMeans(faces)
meanOfSet <- mean(colMeans)
library(tidyverse)
library(ggplot2)
library("png")
# Step 1
faces <- matrix(nrow = 3600,
ncol = 0)
imageList <- list.files("/Users/lucasshin/Desktop/Biometrics/Biometrics HW 3/testingfaces2/")
for (i in length(imageList)) {
photo = imageList[i]
image = readPNG(paste("/Users/lucasshin/Desktop/Biometrics/Biometrics HW 3/testingfaces2/",
photo, sep = ""))
vecImage = as.vector(image)
faces <- cbind(faces, vecImage)
}
colMeans <- colMeans(faces)
meanOfSet <- mean(colMeans)
View(image)
library(tidyverse)
library(ggplot2)
library("png")
# Step 1
faces <- matrix(nrow = 3600,
ncol = 0)
imageList <- list.files("/Users/lucasshin/Desktop/Biometrics/Biometrics HW 3/testingfaces2/")
for (i in 1:length(imageList)) {
photo = imageList[i]
image = readPNG(paste("/Users/lucasshin/Desktop/Biometrics/Biometrics HW 3/testingfaces2/",
photo, sep = ""))
vecImage = as.vector(image)
faces <- cbind(faces, vecImage)
}
View(faces)
library(shiny)
library(tidyverse)
runApp('Desktop/Data Science/DS Notes/pokemon/pokemon/pokemonApp.R')
library(tidyverse)
library(ggplot2)
library("png")
faces <- matrix(nrow = 3600,
ncol = 0)
imageList <- list.files("/Users/lucasshin/Desktop/Biometrics/Biometrics HW 3/testingfaces2/")
for (i in 1:length(imageList)) {
photo = imageList[i]
image = readPNG(paste("/Users/lucasshin/Desktop/Biometrics/Biometrics HW 3/testingfaces2/",
photo, sep = ""))
vecImage = as.vector(image)
faces <- cbind(faces, vecImage)
}
rowMeans <- rowMeans(faces)
subjMeans <- matrix(nrow = 3600, ncol = 0)
for (j in 1:26) {
imagePerSubject <- matrix(nrow = 3600, ncol = 0)
for (k in 1:length(imageList)) {
if (as.numeric(substr(c(imageList[k]), start = 2, stop = 3)) == j) {
imagePerSubject = cbind(imagePerSubject, faces[ , k])
}
}
subjMeans = cbind(subjMeans, rowMeans(imagePerSubject))
}
colnames(subjMeans) <- c(1:26) # renames columns
subjMeans<-subjMeans[,-c(14,21)] # deletes columns 14 and 21, which are NA (since there are no subjects 14 and 21 in the set)
print(sw)
sw <- matrix(nrow = 3600, ncol = 0)
for (m in ncol(subjMeans)) {
subNum = faces[m]
for (n in 1:ncol(faces)) {
if (as.numeric(substr(c(imageList[k]), start = 2, stop = 3)) == subNum)
var <- faces[,n] - subjMeans[subNum]
sw <- sw+(this%*%t(var))
print(sw)
}
}
sw <- matrix(nrow = 3600, ncol = 0)
for (m in ncol(subjMeans)) {
subNum = faces[m]
for (n in 1:ncol(faces)) {
if (as.numeric(substr(c(imageList[k]), start = 2, stop = 3)) == subNum)
var <- faces[,n] - subjMeans[subNum]
sw <- sw+(var%*%t(var))
print(sw)
}
}
# Step 2
sw <- matrix(nrow = 3600, ncol = 0)
for (m in ncol(subjMeans)) {
subNum = faces[m]
for (n in 1:ncol(faces)) {
if (as.numeric(substr(c(imageList[k]), start = 2, stop = 3)) == subNum)
var <- faces[,n] - subjMeans[subNum]
sw <- sw+(var%*%t(var))
print(sw)
}
}
for (m in ncol(subjMeans)) {
subNum = faces[m]
for (n in 1:ncol(faces)) {
if (as.numeric(substr(c(imageList[k]), start = 2, stop = 3)) == subNum)
var <- faces[,n] - subjMeans[subNum]
sw <- sw+(var%*%t(var))
print(sw)
}
}
# Step 2
sw <- matrix(nrow = 3600, ncol = 0)
for (m in ncol(subjMeans)) {
subNum = faces[m]
for (n in 1:ncol(faces)) {
if (as.numeric(substr(c(imageList[k]), start = 2, stop = 3)) == subNum)
var <- faces[,n] - subjMeans[subNum]
sw <- sw+(var%*%t(var))
print(sw)
}
}
# Step 2
sw <- matrix(nrow = 3600, ncol = 3600)
for (m in ncol(subjMeans)) {
subNum = faces[m]
for (n in 1:ncol(faces)) {
if (as.numeric(substr(c(imageList[k]), start = 2, stop = 3)) == subNum)
var <- faces[,n] - subjMeans[subNum]
sw <- sw+(var%*%t(var))
print(sw)
}
}
View(subjMeans)
print(subjMeans[1])
print(columns(subjMeans))
?columns
print(colnames(subjMeans$1))
print(colnames(subjMeans))
subjects <- colnames(subjMeans)
View(subjects)
sw <- matrix(nrow = 3600, ncol = 3600)
for (m in ncol(subjMeans)) {
subNum = subjects[m]
for (n in 1:ncol(faces)) {
if (as.numeric(substr(c(imageList[k]), start = 2, stop = 3)) == subNum)
var <- faces[,n] - subjMeans[subNum]
sw <- sw+(var%*%t(var))
print(sw)
}
}
sw <- matrix(nrow = 3600, ncol = 3600)
for (m in ncol(subjMeans)) {
subNum = subjects[m]
for (n in 1:ncol(faces)) {
if (as.numeric(substr(c(imageList[k]), start = 2, stop = 3)) == subNum)
var <- faces[,n] - subjMeans[subNum]
sw <- sw+(var%*%t(var))
}
}
View(sw)
setwd("~/Desktop/Data Science/DS HW/hw4 (nba salaries vs stats)/NBA_Salary_vs_Stats")
shiny::runApp()
library(shiny)
library(tidyverse)
library(ggplot2)
library(stringr)
library(plotly)
nbaSalaries <- read_csv("nbaSalaries.csv")
advanced1920 <- read_csv("2019.2020advancedStats.csv")
perGame1920 <- read_csv("2019.2020perGameStats.csv")
statsPlayers <- c() # list of all the players in perGame1920 (perGame1920 and advanced1920 have the same players)
for (i in 1:nrow(perGame1920)) {
statsPlayers <- c(statsPlayers, perGame1920$Player[i])
}
salaryPlayers <- c()
for (j in 1:nrow(nbaSalaries)) {
salaryPlayers <- c(salaryPlayers, perGame1920$Player[j])
}
nbaSalariesFiltered <- nbaSalaries %>%
filter(Player %in% statsPlayers) %>%
select(Player, `2019-20`, `2020-21`, `2021-22`, `2022-23`, `2023-24`, `2024-25`, `Guaranteed\\`)
# remove punctuation from entries in Guaranteed column
nbaSalariesFiltered$Guaranteed <- str_remove(nbaSalariesFiltered$`Guaranteed\\`,
"[:punct:]")
nbaSalariesFiltered <- nbaSalariesFiltered %>%
select(Player, `2019-20`, `2020-21`, `2021-22`, `2022-23`, `2023-24`, `2024-25`, Guaranteed)
perGame1920Filtered <- perGame1920 %>%
select(!GS)
advanced1920Filtered <- advanced1920 %>%
select(Player, PER, `TS%`, `USG%`, OBPM, DBPM, BPM)
# joined nbaSalaries with perGame1920
salaryAndPerGame <- left_join(nbaSalariesFiltered,
perGame1920Filtered,
by = "Player")
# joined salaryAndPerGame with advanced1920
allData <- left_join(salaryAndPerGame,
advanced1920Filtered,
by = "Player")
# get rid of \
colnames(allData) <- str_replace_all(colnames(allData),
"\\\\",
"")
allData$PTS <- str_remove(allData$PTS,
"\\\\")
# change '3' to 'three'
colnames(allData) <- str_replace_all(colnames(allData),
"3",
"three")
# change '%' to 'Percent'
colnames(allData) <- str_replace_all(colnames(allData),
"%",
"Percent")
# rename columns
colnames(allData) <- c('Player', 'szn2020', 'szn2021', 'szn2022', 'szn2023', 'szn2024', 'szn2025', 'Guaranteed', 'Position', 'Age', 'Team',
'GamesPlayed', 'MinutesPlayed', 'FGM', 'FGA', 'FGPercent', 'ThreesPointersMade', 'ThreePointAttempts', 'ThreePointPercent',
'TwoPointersMade', 'TwoPointAttempts', 'TwoPointPercent', 'eFGPercent', 'FTM', 'FTA', 'FTPercent', 'ORB', 'DRB', 'TRB', 'AST',
'STL', 'BLK', 'TOV', 'PF', 'PTS', 'PER', 'TSPercent', 'USG', 'OBPM', 'DBPM', 'BPM')
# Put this in to get rid of everything after the \\ in the player names
allData$Player <- sub("\\\\.*", "", allData$Player)
View(allData)
