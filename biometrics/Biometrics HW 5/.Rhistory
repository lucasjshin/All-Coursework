# scrape celeb's relationship status
relationshipStatus <- sub(".*Relationship Status:\n\n", "", bioData)
relationshipStatus <- sub(" .*", "", relationshipStatus) %>%
tolower()
# scrape celeb's relationship status
relationshipStatus <- sub(".*Relationship Status:\n\n", "", bioData)
relationshipStatus <- sub(" .*", "", relationshipStatus) %>%
tolower()
relationshipStatus <- sub("\.*", "", relationshipStatus)
relationshipStatus <- sub("\.*", "", relationshipStatus)
# scrape celeb's relationship status
relationshipStatus <- sub(".*Relationship Status:\n\n", "", bioData)
relationshipStatus <- sub(" .*", "", relationshipStatus) %>%
tolower()
relationshipStatus <- sub("\n.*", "", relationshipStatus)
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
bioData <- url %>%
read_html(options = RECOVER, NOWARNING) %>%
html_nodes(xpath = '//*[@id="main"]/div/div[2]/div[2]/div[1]') %>%
html_text(trim = FALSE) %>%
str_remove_all("\t")
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
bioData <- url %>%
read_html(options = "RECOVER", "NOWARNING") %>%
html_nodes(xpath = '//*[@id="main"]/div/div[2]/div[2]/div[1]') %>%
html_text(trim = FALSE) %>%
str_remove_all("\t")
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
shiny::runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
?removeUI
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
?updateTextInput
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
?session
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
?updateActionButton()
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
?updateRadioButtons
?updateOutput
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
?updateRadioButtons
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp()
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp()
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
?conditionalPanel
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
?reactiveValues
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
conditionalPanel
?conditionalPanel
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
chikAnalysis <- chickwts %>%
filter(feed == "horsebean") %>%
select(weight) %>%
summary()
chikAnalysis
print(chikAnalysis)
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
writeImpl
?writeImpl
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
chikAnalysis <- chickwts %>%
filter(feed == "horsebean") %>%
select(weight) %>%
summary()
?summary
chikAnalysis
chikAnalysis[1]
summary <- sub(".*:", "", chikAnalysis)
summary
summary <- sub(".*:", "", chikAnalysis[1])
Summary
summary
summary <- sub(" .*", "", summary)
length(chikAnalysis)
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
shiny::runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
chikAnalysis <- chickwts %>%
filter(feed == "horsebean") %>%
select(weight)
View(chikAnalysis)
other <- chickwts
View(other)
other <- chickwts %>%
filter(feed != "horsebean")
View(other)
chikAnalysis <- chickwts %>%
filter(feed == "horsebean") %>%
select(weight) %>%
mutate(max = max(weight))
View(chikAnalysis)
chikAnalysis <- chickwts %>%
filter(feed == "horsebean") %>%
select(weight) %>%
mutate(max = max(weight)) %>%
mutate(min = min(weight))
?median
chikAnalysis <- chickwts %>%
filter(feed == "horsebean") %>%
select(weight) %>%
mutate(max = max(weight)) %>%
mutate(min = min(weight)) %>%
mutate(median = median(weight))
other <- chickwts %>%
filter(feed != "horsebean") %>%
select(weight) %>%
mutate(max = max(weight)) %>%
mutate(min = min(weight)) %>%
mutate(median = median(weight))
View(other)
chikAnalysis <- chickwts %>%
filter(feed == "horsebean") %>%
select(weight) %>%
mutate(max = max(weight)) %>%
mutate(min = min(weight)) %>%
mutate(mean = mean(weight))
chikAnalysis <- chickwts %>%
filter(feed == "horsebean") %>%
select(weight) %>%
mutate(max = max(weight)) %>%
mutate(min = min(weight)) %>%
mutate(mean = mean(weight)) %>%
mutate(median = median(weight))
other <- chickwts %>%
filter(feed != "horsebean") %>%
select(weight) %>%
mutate(max = max(weight)) %>%
mutate(min = min(weight)) %>%
mutate(mean = mean(weight)) %>%
mutate(median = median(weight))
print(chikAnalysis[1])
print(chikAnalysis[2][1])
print(chikAnalysis[2])
print(chikAnalysis[2])
print(chikAnalysis[2,1])
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp()
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
selectedMin <- selected %>% min(weight)
selected <- chickwts %>%
filter(feed == "horsebean") %>%
select(weight) %>%
mutate(max = max(weight)) %>%
mutate(min = min(weight)) %>%
mutate(mean = mean(weight)) %>%
mutate(median = median(weight))
selectedMin <- selected %>% min(weight)
selected
selected(max)
selected[max]
View(selected)
selected %>%
summarize(mean = mean(weight))
selectedMean <- selected %>%
summarize(mean = mean(weight))
View(selectedMean)
print(selectedMean)
selectedMean <- selected %>%
summarize(mean(weight))
selectedMean <- selected %>%
mean(weight)
selectedMean <- selected %>% mean(weight)
?mean
selectedMean <- mean(selected[[1]])
selectedMin <- min(selected[[1]])
selectedMax <- max(selected[[1]])
selectedMax <- max(selected[[1]])
selectedMin <- min(selected[[1]])
selectedMean <- mean(selected[[1]])
selectedMedian <- median(selected[[1]])
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
selectedMax <- max(selected[[1]])
selectedMin <- min(selected[[1]])
selectedMean <- mean(selected[[1]])
selectedMedian <- median(selected[[1]])
otherMax <- max(other[[1]])
otherMin <- min(other[[1]])
otherMean <- mean(other[[1]])
otherMedian <- median(other[[1]])
selected <- chickwts %>%
filter(feed == "horsebean") %>%
select(weight) %>%
mutate(max = max(weight)) %>%
mutate(min = min(weight)) %>%
mutate(mean = mean(weight)) %>%
mutate(median = median(weight))
otherMax <- max(other[[1]])
otherMin <- min(other[[1]])
otherMean <- mean(other[[1]])
otherMedian <- median(other[[1]])
otherMean <- signif(mean(other[[1]]), 5)
otherMean <- signif(mean(other[[1]]), 4)
selectedMean <- signif(mean(selected[[1]]), 4)
selectedMax <- signif(max(selected[[1]]), 4)
selectedMin <- signif(min(selected[[1]]), 4)
selectedMean <- signif(mean(selected[[1]]), 4)
selectedMedian <- signif(median(selected[[1]]), 4)
otherMax <- signif(max(other[[1]]), 4)
otherMin <- signif(min(other[[1]]), 4)
otherMean <- signif(mean(other[[1]]), 4)
otherMedian <- signif(median(other[[1]]), 4)
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
runApp('Desktop/Data Science/DS TESTS/DS Test 2/Test2')
setwd("~/Desktop/Biometrics/Biometrics HW 5")
library(tidyverse)
library(ptw)
library(ggplot2)
library("png")
#Input: Matrix Output: Matrix with a border of zeros, also known as zero padding
#Create a function that takes in an 3x3 matrix and returns a vector a units long Values equal to and above the middle element are given a score of 1 and those below are given a zero.
padding <- function(src) {
mat1 <- padzeros(src,1,side="both")
mat2 <- padzeros(t(mat1),1,side="both")
return(t(mat2))
}
lbpthreshold <- function(mat){
# Extracts the middle element of the 3 by 3 matrix
val <- mat[2,2]
tmp <- mat
tmp[mat >= val] <- 1
tmp[mat < val] <- 0
dst <- c(tmp[1,1], tmp[1,2], tmp[1,3], tmp[2,3], tmp[3,3], tmp[3,2], tmp[3,1], tmp[2,1])
# Removes the middle element of the  3x3 vector
return(dst)
}
#Convert a binary number into a decimal value. Binary number given in reverse order. (e.g. 1100 is 3, not 12)
#Input: Image matrix Output: LBP matrix
lbpval <- function(x){
val <- 0
for (i in 1:length(x)){
val <- val + x[i] * 2 ^ (i-1)
}
return(val)
}
# Creates a new matrix full of zeros, smaller in size to remove the zero padding
lbpmat <- function(src){
dst <- matrix(0L, nrow = (dim(src)[1] - 2), ncol = (dim(src)[2] - 2))
rows <- dim(src)[1]
cols <- dim(src)[2]
for (row in c(2:(rows-1))){
for(col in c(2:(cols-1))){
tmp <- src[c( (row-1):(row+1)), c( (col-1):(col+1))]
threshvec <- lbpthreshold(tmp)
binnum <- lbpval(threshvec)
dst[row-1,col-1] <- binnum
} }
return(dst)
}
#Divide image into windows and create histogram feature vectors
lbphist <- function(src){
bins <- seq(0,256,l=9)
h <- hist(as.vector(src), breaks = bins,plot=FALSE)
return(h$counts)
}
lbpfeatvec <- function(src, numywin, numxwin){
rows <- dim(src)[1]
cols <- dim(src)[2]
feats = c()
yrange <- floor(rows / numywin) - 1
xrange <- floor(cols / numxwin) - 1
for(y in c(1:numywin)){
for(x in c(1:numxwin)){
ymin <- y + (y-1)*yrange
ymax <- y + (y-1)*yrange + yrange
xmin <- x + (x-1)*xrange
xmax <- x + (x-1)*xrange + xrange
tmp <- src[c(ymin:ymax),c(xmin:xmax)]
featvec <- lbphist(tmp)
feats <- c(feats, featvec)
}
}
return(feats)
}
# Compare to LBP feature vectors
lbpmatcher <- function(l1, l2){
return (sum(abs(l1 - l2)))
}
# MAIN FUNCTION/CONTROL SEQUENCE
imgdir <- "/Users/lucasshin/Desktop/Biometrics/Biometrics HW 5/testingfaces2/"
img_filenames <- list.files(path=imgdir, pattern="*.png")
# Stores all of the LBP feature vectors to compare two images
lbpimg <- vector("list", length(img_filenames))
lbpvecs <- vector("list", length(img_filenames))
# Creates 16 windows from image
nrows <- 4
ncols <- 4
for (i in 1:length(img_filenames)) {
imgdata <- readPNG(paste(imgdir, img_filenames[i], sep =""))
imgdata <- (imgdata - min(imgdata)) / (max(imgdata) - min(imgdata))
paddedimg <- padding(imgdata)
lbpimg[[i]] <- lbpmat(paddedimg)
lbpvecs[[i]] <- lbpfeatvec(lbpimg[[i]], nrows, ncols)
}
# Image matching experiment
# Create a matrix to hold scores
scores = matrix(0L, nrow = length(img_filenames), ncol = length(img_filenames))
for (i in 1:length(img_filenames)) {
for (j in 1:length(img_filenames)) {
scores[i,j] <- lbpmatcher(lbpvecs[[i]], lbpvecs[[j]])
}
}
?read.table
d <- scores
gallery <- c()
query <- c()
for (i in length(img_filenames)) {
gallery <- c(gallery, substr(c(imageList[i]), start = 2, stop = 3))
}
gallery <- c(gallery, substr(c(img_filenames[i]), start = 2, stop = 3))
library(stringr)
for (i in length(img_filenames)) {
gallery <- c(gallery, substr(c(img_filenames[i]), start = 2, stop = 3))
}
length(img_filenames)
for (i in length(img_filenames)) {
gallery <- c(gallery, substr(img_filenames[i], start = 2, stop = 3))
}
for (i in length(img_filenames)) {
gallery <- c(gallery, substr(img_filenames[i], start = 2, stop = 3))
}
for (i in 1:length(img_filenames)) {
gallery <- c(gallery, substr(img_filenames[i], start = 2, stop = 3))
}
gallery <- c()
for (i in 1:length(img_filenames)) {
gallery <- c(gallery, substr(img_filenames[i], start = 2, stop = 3))
}
View(gallery)
query <- gallery
gallery <- as.matrix(gallery)
query <- gallery
View(query)
install.packages("reshape")
library("reshape")
colnames(d) <- as.matrix(gallery) rownames(d) <- as.matrix(query)
colnames(d) <- as.matrix(gallery)
rownames(d) <- as.matrix(query)
m <- melt(d)
names(m) <- c("xA", "xE", "dist")
# Compare the labels of xA and xE to see which ones are different and which ones are the same.
genuine <- m[m[,1] == m[,2],]
impostor <- m[m[,1] != m[,2],]
# Calculate the density of each distribution
genden <- density(genuine[,3]) impden <- density(impostor[,3])
# Calculate the density of each distribution
genden <- density(genuine[,3])
impden <- density(impostor[,3])
xmin <- min(genden$x,impden$x)
xmax <- max(genden$x,impden$x)
ymin <- min(genden$y,impden$y)
ymax <- max(genden$y,impden$y)
plot(genden, xlim=c(xmin,xmax), ylim=c(ymin,ymax), main="Distribution of Genuine and Impostor Scores", x)
plot(genden, xlim=c(xmin,xmax), ylim=c(ymin,ymax), main="Distribution of Genuine and Impostor Scores", xlab="Scores", ylab="Density", col = "blue", lwd = 2)
lines(impden, col = "red", lwd = 2)
polygon(genden, col=rgb(0,0,1,0.5))
polygon(impden, col=rgb(1,0,0,0.5))
legend('topright', c("Genuine","Impostor"), col = c("blue","red"), lty = c(1,1), lwd = c(2.5,2.5))
# Calculate Sensitivity Index (D-Prime)
dprime = function(mu1,mu0,sig1,sig0) {
sqrt(2) * abs(mu1 - mu0) / sqrt(sig1^2 + sig0^2)
}
mu1 = mean(genuine[,3])
mu0 = mean(impostor[,3])
sig1 = sd(genuine[,3])
sig0 = sd(impostor[,3])
print(paste("Sensitivity Index:",dprime(mu1,mu0,sig1,sig0)))
# Create a function to FAR and FRR given a threshold
# Distance scores are used to compute this DET curve. If the scores are # similarity scores, then reverse the logical operators
DET = function(threshold, gen, imp){
# The percentage of impostor scores that are claimed to be genuine
far = length(imp[ imp < threshold]) / length(imp)
# The percentage of true identities that are claimed to be impostors frr = length(gen[ gen > threshold]) / length(gen)
datapoint = c(threshold,far,frr) return(datapoint)
}
# Create a function to FAR and FRR given a threshold
# Distance scores are used to compute this DET curve. If the scores are # similarity scores, then reverse the logical operators
DET = function(threshold, gen, imp){
# The percentage of impostor scores that are claimed to be genuine
far = length(imp[ imp < threshold]) / length(imp)
# The percentage of true identities that are claimed to be impostors frr = length(gen[ gen > threshold]) / length(gen)
datapoint = c(threshold,far,frr)
return(datapoint)
}
# Plot the ROC Curve
thresholds = seq(xmin, xmax,(xmax-xmin)/100)
detcurve = t(sapply(thresholds, DET, genuine[,3], impostor[,3])) colnames(detcurve) = c("threshold","far","frr")
plot(detcurve[,2], detcurve[,3], xlim = c(0,0.3), ylim = c(0,0.3), type = "l", lwd = 2, xlab = "FAR", ylab = "FRR", main="Detection Error Tradeoff Curve")
# Plot the ROC Curve
thresholds = seq(xmin, xmax,(xmax-xmin)/100)
detcurve = t(sapply(thresholds, DET, genuine[,3], impostor[,3]))
# Plot the ROC Curve
thresholds = seq(xmin, xmax,(xmax-xmin)/100)
detcurve = t(sapply(thresholds, DET, genuine[,3], impostor[,3]))
detcurve = t(sapply(thresholds, DET, genuine[,3], impostor[,3]))
# Create a function to FAR and FRR given a threshold
# Distance scores are used to compute this DET curve. If the scores are # similarity scores, then reverse the logical operators
DET = function(threshold, gen, imp){
# The percentage of impostor scores that are claimed to be genuine
far = length(imp[ imp < threshold]) / length(imp)
# The percentage of true identities that are claimed to be impostors frr = length(gen[ gen > threshold]) / length(gen)
datapoint = c(threshold,far,frr)
return(datapoint)
}
# Plot the ROC Curve
thresholds = seq(xmin, xmax,(xmax-xmin)/100)
detcurve = t(sapply(thresholds, DET, genuine[,3], impostor[,3]))
detcurve = t(sapply(thresholds, DET, genuine[,3], imposter[,3]))
detcurve = t(sapply(thresholds, DET, genuine[,3], impostor[,3]))
detcurve = t(sapply(thresholds, DET, genuine[,3], impostor[,3]))
?sapply
# Plot the ROC Curve
thresholds = seq(xmin, xmax,(xmax-xmin)/100)
detcurve = t(sapply(thresholds, DET, genuine[,3], impostor[,3]))
# Create a function to FAR and FRR given a threshold
# Distance scores are used to compute this DET curve. If the scores are # similarity scores, then reverse the logical operators
DET = function(threshold, gen, imp){
# The percentage of impostor scores that are claimed to be genuine
far = length(imp[ imp < threshold]) / length(imp)
# The percentage of true identities that are claimed to be impostors frr = length(gen[ gen > threshold]) / length(gen)
datapoint = c(threshold,far,frr)
return(datapoint)
}
# Plot the ROC Curve
thresholds = seq(xmin, xmax,(xmax-xmin)/100)
detcurve = t(sapply(thresholds, DET, genuine[,3], impostor[,3]))
library(ptw)
# Plot the ROC Curve
thresholds = seq(xmin, xmax,(xmax-xmin)/100)
detcurve = t(sapply(thresholds, DET, genuine[,3], impostor[,3]))
colnames(detcurve) = c("threshold","far","frr")
View(impostor)
View(impostor)
# Plot the ROC Curve
thresholds = seq(xmin, xmax,(xmax-xmin)/100)
detcurve = t(sapply(thresholds, DET, thresholds, genuine[,3], impostor[,3]))
detcurve = t(sapply(thresholds, DET, genuine[,3], impostor[,3]))
